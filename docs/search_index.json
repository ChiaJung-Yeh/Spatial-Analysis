[["basic-quantitative-geography.html", "Chapter 6 Basic Quantitative Geography 6.1 Point Patterns Analysis 6.2 Spatial Autocorrelation Analysis", " Chapter 6 Basic Quantitative Geography From chapter 3 to 5, we have learned how to do make maps and do spatial operations, they are all fundamental and vital contents regarding spatial analysis. The operations we have learned could help us identify what the space “looks like”; however, up to now, we have no idea about “what space tells.” Hence, this chapter would introduce the basic theory and application of quantitative geography. We would learn the point patterns and spatial auto correlation, which are relatively simple in this field, and can also apply to the analysis on transportation issue. Note that there are much more to explore other than these two elements, if interested, please refer to the textbook Spatial Data Analysis - An Introduction For Gis Users. In this chapter, we require a preliminary knowledge on statistics, especially the concept of hypothetical test. 6.1 Point Patterns Analysis 6.1.1 Basic measures Two commonly used summary measures of point pattern analysis are the mean center and the standard distance. The mean center of a point pattern implies the central tendency of the whole points. It is simply the mean of the x and y coordinates: \\[\\bar{\\bf{x}}=(\\frac{\\sum_{i=1}^n \\ {x_i}}{n}, \\quad \\frac{\\sum_{i=1}^n \\ {y_i}}{n})\\] In the equation above, the bold letter \\(\\bar{\\bf{x}}\\) represents a vector of X and Y coordinates, and the number of points is \\(n\\). Besides mean, the other basic statistic is “standard deviation,” that is, the standard distance in the spatial analysis. This standard distance can be interpreted as the dispersion around the mean center: \\[{d_s}=\\sqrt{\\frac{\\sum_{i=1}^n \\ {{(x_i-\\mu_x)}^2+{(y_i-\\mu_y)}^2}}{n}}\\] As for the center analysis, we may come up with the function st_centroid. However, the function can only use on the center of polygon, it can not retrieve the center of multiple points. An easiest way is to do the summary of X and Y coordinates of the whole points. Take Taipei YouBike for instance. Data needed has been downloaded previously. You placed the file in the same directory as the R script file. Click here to re-download the file if it is lost. First, we need to convert X and Y coordinates by using st_coordinates(), and then, just calculate the mean and standard deviation on the data converted. # import the shapefile taipei_youbike=read_sf(&quot;./data/taipei_youbike/taipei_youbike.shp&quot;) # retrieve the coordinated of the points taipei_youbike_coor=st_coordinates(taipei_youbike) # calculate mean and standard deviation apply(taipei_youbike_coor, 2, FUN=mean) ## X Y ## 304679.5 2771747.9 apply(taipei_youbike_coor, 2, FUN=var)^0.5 ## X Y ## 3143.041 3905.884 From the results above, we can know that the mean of X is 304679.5, while the mean of Y is 2771747.9. Also the standard deviation of X and Y are 3143.041 and 3905.884 respectively. Thus, the standard distance would be \\(\\sqrt{(3143.041^2+3905.884^2)}=5013.45\\) meters. Figure below shows the center and standard distance of Taipei YouBike. There is another package called aspace that can calculate the center and standard distance directly. But very unfortunately, this package has been removed from CRAN recently. Thus, please download the zip file here, and place it into the same directory as your R script file. The installation code from the local is as follows. install.packages(&quot;devtools&quot;) devtools::install_local(&quot;./aspace-master.zip&quot;) library(aspace) Now, let’s again use YouBike data to retrieve its center and standard distance by function mean_centre() and calc_sdd provided by package aspace. youbike_center=mean_centre(points=taipei_youbike_coor) ## id CENTRE.x CENTRE.y ## 1 1 304679.5 2771748 youbike_sdd=calc_sdd(points=taipei_youbike_coor) ## $id ## [1] 1 ## ## $calccentre ## [1] TRUE ## ## $weighted ## [1] FALSE ## ## $CENTRE.x ## [1] 304679.5 ## ## $CENTRE.y ## [1] 2771748 ## ## $SDD.radius ## [1] 5016.196 ## ## $SDD.area ## [1] 79049460 We can find that the result from two packages are approximately the same. Note that $SDD.radius represents the standard distance, and it causes only 3 meters difference from what we calculate above. In addition, there is a function called CF() that can identify the central feature within a set of point locations. That is, the center of the points must be one of the points. youbike_center_CF=CF(points=data.frame(taipei_youbike_coor)) ## id CF.x CF.y ## 1 1 304864.8 2770973 # use left_join() to find out what the station is left_join(youbike_center_CF, cbind(taipei_youbike, st_coordinates(taipei_youbike)), by=c(&quot;CF.x&quot;=&quot;X&quot;, &quot;CF.y&quot;=&quot;Y&quot;))%&gt;% select(StatnNm, CF.x, CF.y) ## StatnNm CF.x CF.y ## 1 YouBike1.0_復興市民路口 304864.8 2770973 Besides the general calculation of center and standard distance, package aspace can also consider the weights. The general center can only represent the geographical position, but cannot reflect the one affected by the social and economic factors. Now let’s move on to the shapefile of Taipei village in the downloaded data, which contains the attribute of population for each village. And our purpose is to find out the “geographical centroid” and the “center of the population density” of each district in Taipei City. Obtaining these two values, we can compare the difference of two kind of points, and explain the implications. For the centroid of town, simply use function st_centroid() to retrieve the center of each district. As for the calculation of weighted center, it is suggested to use for loop. First of all, we need to calculate the population density of each village, which equals to population divided by the area. Then, finding the centroid of each village by function st_centroid() to be the representative point of the village. Next, use function mean_centre() and set the parameters weighted=T and weights=..., to calculate the center of all the points revised by the weight of population density. And, also, apply function calc_sdd() to calculate the standard distance under the influence of weight. The code and result are shown below. # import shapefile village=read_sf(&quot;./data/taipei_map/taipei_village_map.shp&quot;) weight_analysis=data.frame() for (i in unique(village$TOWNNAME)){ # filter the town village_dis=filter(village, TOWNNAME==i) # find the centroid of town town_center=st_centroid(filter(town, TOWNNAME==i)) town_center=st_coordinates(town_center) # find the centroid of each village (representative points) village_center=st_centroid(village_dis) # retrieve the coordinate of each point village_center_coor=st_coordinates(village_center) # set the weights as population density # population density = population / area # st_area retrieves &quot;unit&quot; type data, and the unit is m^2, thus use as.numeric to convert it, and divide by 1,000,000 village_center_pd=mean_centre(points=village_center_coor, weighted=T, weights=(village_dis$PP/(as.numeric(st_area(village_dis))/1000000))) vil_sdd_pd=calc_sdd(points=village_center_coor, weighted=T, weights=(village_dis$PP/(as.numeric(st_area(village_dis))/1000000))) # store the result in the table weight_analysis=rbind(weight_analysis, data.frame(TOWN=i, town_center, village_center_pd[2:3], vil_sdd_pd$SDD.radius)) } head(weight_analysis) ## TOWN X Y CENTRE.x CENTRE.y vil_sdd_pd.SDD.radius ## 1 文山區 307943.5 2764644 305750.9 2765138 1387.2986 ## 11 中正區 302460.2 2769473 302261.5 2769187 1093.2534 ## 12 信義區 307688.8 2769306 307545.2 2770010 1224.0450 ## 13 大安區 304841.9 2768863 304819.4 2769310 1238.6796 ## 14 萬華區 300190.7 2769123 300484.0 2769100 921.0697 ## 15 南港區 311532.8 2769909 309988.0 2771236 1316.9046 In the figure shown above, the blue dots represent the geographical centroid, which is the center of the polygons, while the red dots represent the centers weighted by the population density of each village in. Also, the red buffer means the weighted standard distance of each district. Take a closer look on the map. We can find that the district adjacent to the mountanious area, for instance 北投區, 士林區, 文山區, 南港區 have a larger difference between the geographical centroid and the population weighted center. Obviously, it is because people tend to live in plains with abundant living requirements. For the districts near CBD, such as 大同區, the differences between two points are slight. This can further prove that using “geographical centroid” may not be meaningful, for it does not correspond to the real life. The weighted center can illustrate the population distribution, and even signify the land use of each district in Taipei City. To sum up, learning how to derive the weighted center may be an importaant issue in spatial analysis. 6.1.2 Quadrat Analysis 6.1.3 Nearest Neighbour Analysis 6.2 Spatial Autocorrelation Analysis "]]
